type Book = record {
  id : nat64;
  title : text;
  borrower : opt text;
  author : text;
  genre : Genre;
  is_available : bool;
};
type BookPayload = record { title : text; author : text; genre : Genre };
type Error = variant {
  InvalidInput : record { msg : text };
  NotFound : record { msg : text };
  InternalError : record { msg : text };
  InvalidOperation : record { msg : text };
};
type Genre = variant { NonFiction; Technology; Fiction; Science };
type Result = variant { Ok : Book; Err : Error };
type Result_1 = variant { Ok; Err : Error };
service : {
  add_book : (BookPayload) -> (Result);
  borrow_book : (nat64) -> (Result);
  delete_book : (nat64) -> (Result_1);
  get_available_books : () -> (vec Book) query;
  get_book : (nat64) -> (Result) query;
  list_all_books : () -> (vec Book) query;
  return_book : (nat64) -> (Result);
  search_books_by_genre : (Genre) -> (vec Book) query;
}
